{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.c327e12cf61faf8f7442.hot-update.js","sources":["webpack:///./snippets/previewBar.js"],"sourcesContent":["\r\nclass PreviewBar extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {animReq:null};\r\n    this.htmlRef = React.createRef();\r\n    this.injectHtml = this.injectHtml.bind(this);\r\n  }\r\n\r\n  requestAnimation(el){\r\n    animReq = requestAnimationFrame(requestAnimation);\r\n    let times = 3000*60;\r\n    let dis = el.clientHeight/times; // moves up per second\r\n    el.style.transform = `translateY(-${dis}px)`;\r\n\r\n    let animKeyframe = `\r\n     @keyframes infiniteSlide{\r\n        from {\r\n          transform: translateY(0)\r\n        }\r\n        to {\r\n          transform: translateY(-50%)\r\n        }\r\n     }\r\n    `\r\n  }\r\n\r\n  componentDidMount(){\r\n    let injectedHtmlElCollection = this.htmlRef.current.children; // object\r\n    for(let n=0;n<injectedHtmlElCollection.length;n++){\r\n      let el = injectedHtmlElCollection[n];\r\n      if(el.classList.contains('link-container')){\r\n        el.setAttribute(\"style\",\"height:22px;overflow:hidden\");\r\n        if(el.children[0].tagName==='UL'){\r\n          let ul = el.children[0];\r\n          let animKeyframe = `\r\n            @keyframes infiniteSlide{\r\n                from {\r\n                  transform: translateY(0)\r\n                }\r\n                to {\r\n                  transform: translateY(-50%)\r\n                }\r\n            }\r\n          `;\r\n          let animKeyFrame = React.createElement('style',{},animKeyframe);\r\n          let keyframeEl = document.createElement('style');\r\n          keyframeEl.textContent = `\r\n            @keyframes infiniteSlide{\r\n                from {\r\n                  transform: translateY(0)\r\n                }\r\n                to {\r\n                  transform: translateY(-50%)\r\n                }\r\n            }\r\n          `;\r\n          ul.insertAdjacentElement('afterbegin',keyframeEl);\r\n          ul.setAttribute(\"style\",\"padding:0;margin:0;list-style:none;transition:all 2.5s;animation:infiniteSlide 2.5s infinite alternate\")\r\n          // ul.style.transform=`translateY(-${ul.clientHeight / 2}px)`;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    console.log('component updated')\r\n  }\r\n\r\n  injectHtml(html){\r\n    let contExp = /link\\-container/;\r\n    let havCont = contExp.test(html);\r\n    if(havCont){\r\n\r\n    }\r\n    console.log('injected')\r\n    return (\r\n      <div dangerouslySetInnerHTML={{__html:html}} ref={this.htmlRef}></div>\r\n    )\r\n  }\r\n\r\n  render(){\r\n    const {bgColor, ftColor } = this.props.barConfig;\r\n    return (\r\n      <div style={{margin:'20px 0'}}>\r\n        <div style={{padding:'8px 0',position:'relative',backgroundColor:bgColor,color:ftColor}}>\r\n          { this.props.barConfig.goal?\r\n            this.props.barConfig.inpTxt + '$' + this.props.barConfig.goal\r\n            :\r\n            this.props.barConfig.inpTxt\r\n          }\r\n          {/* #question: how to turn user input into raw html */}\r\n          { this.props.barConfig.addedHtml?\r\n              this.injectHtml(this.props.barConfig.addedHtml) \r\n              :\r\n              null\r\n          }\r\n          <div style={{position:'absolute',top:'8px',right:'8px'}}>X</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PreviewBar;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAKA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAUA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAUA;AACA;AACA;AAUA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AApGA;AACA;AAsGA;;;;A","sourceRoot":""}