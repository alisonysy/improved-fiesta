{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.fcc36385fc5eb5df8fe0.hot-update.js","sources":["webpack:///./components/contentConfig.js"],"sourcesContent":["import { Card, TextField, DisplayText, Stack, Form, FormLayout, Button, Select, Checkbox, ChoiceList } from '@shopify/polaris';\r\nimport { useState, useCallback, useEffect } from 'react';\r\n\r\nfunction NameField(props){\r\n  const [name,setName] = useState('');\r\n\r\n  useEffect(()=>{\r\n    props.handleName(name);\r\n  },[name]);\r\n\r\n  return ( \r\n    <Card.Section>\r\n      <TextField label=\"Name: \" value={name} onChange={ (nw) => setName(nw)} />\r\n    </Card.Section>\r\n  )\r\n}\r\n\r\nfunction FreeShippingGoal(props){\r\n  const [goal,setGoal] = useState(30);\r\n  const _handleGoalChange = function(newGoal){\r\n    setGoal(newGoal);\r\n    props.handleGoalChange(newGoal)\r\n  }\r\n  return (\r\n    <Card.Section>\r\n      <TextField \r\n        label=\"Free Shipping Goal: \" \r\n        type=\"number\"\r\n        value={goal} \r\n        onChange={(nw) => _handleGoalChange(nw)} \r\n      />\r\n    </Card.Section>\r\n  );\r\n}\r\n\r\nfunction InitialMsg(props){\r\n  const [msg,setMsg] = useState('Free Shipping on All Orders Over ');\r\n  const [added,setAdded] = useState('');\r\n\r\n  useEffect(()=>{\r\n    props.handleMsgChange({initialMsg1:msg,initialMsg2:added});\r\n  },[msg,added])\r\n\r\n  return (\r\n    <Card.Section>\r\n      <Stack alignment=\"center\" distribution=\"fill\">\r\n        <TextField\r\n          label=\"Initial message: \"\r\n          type=\"text\"\r\n          value={msg}\r\n          onChange={(nw) => setMsg(nw)}\r\n          helpText=\"Display when cart is empty\"\r\n        />\r\n        <div style={{fontSize:'18px'}}>{props.currency} {props.goal}</div>\r\n        <TextField \r\n          label=\" \"\r\n          type=\"text\"\r\n          value={added}\r\n          onChange={(nw) => setAdded(nw)}\r\n        />\r\n      </Stack>\r\n    </Card.Section>\r\n  )\r\n}\r\n\r\nfunction ProgressMsg(props){\r\n  const [msg,setMsg] = useState('Only ');\r\n  const [added,setAdded] = useState(' away from free shipping');\r\n  const gl = props.goal;\r\n\r\n  useEffect(()=>{\r\n    props.handleMsgChange({prgMsg1:msg,prgMsg2:added})\r\n  },[msg,added])\r\n\r\n  return (\r\n    <Card.Section condensed>\r\n      <Stack alignment=\"center\" distribution=\"fill\">\r\n        <TextField\r\n          label=\"Progress message: \"\r\n          type=\"text\"\r\n          value={msg}\r\n          onChange={(nw) => setMsg(nw)}\r\n          helpText=\"Displays when cart value is less than the goal\"\r\n        />\r\n        <div style={{fontSize:'18px'}}>{props.currency} {gl-1}</div>\r\n        <TextField \r\n          label=\" \"\r\n          type=\"text\"\r\n          value={added}\r\n          onChange={(nw) => setAdded(nw)}\r\n        />\r\n      </Stack>\r\n    </Card.Section>\r\n  )\r\n}\r\n\r\nfunction GoalAchieved(props){\r\n  const [msg,setMsg] = useState('Free Shipping Worldwide');\r\n\r\n  useEffect(()=>{\r\n    props.handleMsgChange({achievedMsg:msg})\r\n  },[msg])\r\n\r\n  return (\r\n    <Card.Section>\r\n      <TextField\r\n        label=\"Goal Achieved Message: \"\r\n        type=\"text\"\r\n        value={msg}\r\n        onChange={(nw) => setMsg(nw)}\r\n        helpText=\"Displays when cart value is greater than goal\"\r\n      />\r\n    </Card.Section>\r\n  )\r\n}\r\n\r\nfunction AddLinkToBar(props){\r\n  const [havLink,setHavLink] = useState(false);\r\n  const [url,setUrl] = useState('');\r\n  const [checkbox,setChecked] = useState(false);\r\n\r\n  const opts=[\r\n    {label:'Off',value:false},\r\n    {label:'On',value:true}\r\n  ]\r\n\r\n  const handleSwitch = (val) => {\r\n    val = val === 'true'? true : false;\r\n    setHavLink(val);\r\n    if(!val){\r\n      props.handleBarLinkChange('');\r\n    }\r\n  }\r\n\r\n  const handleCheckbox = (val) => {\r\n    setChecked(val);\r\n    props.handleBarLinkChange(val);\r\n  }\r\n\r\n  return(\r\n    <Card.Section>\r\n      <Select \r\n        label=\"Add Link to the Bar: \"\r\n        options={opts}\r\n        onChange={handleSwitch}\r\n        value={havLink}\r\n      />\r\n      {\r\n        havLink?\r\n        // <FormLayout.Group>\r\n        <div>\r\n          <TextField\r\n            label=\"Link URL: \"\r\n            type=\"url\"\r\n            value={url}\r\n            onChange={(nw) => {setUrl(nw); props.handleBarLinkChange(nw);}}\r\n            helpText=\"This address will be visited after clicking the bar\"\r\n          />\r\n          <Checkbox \r\n            label=\"Open the link in a NEW tab when clicked\"\r\n            checked={checkbox}\r\n            onChange={(nw) => handleCheckbox(nw)}\r\n          />\r\n        </div>\r\n        // </FormLayout.Group>\r\n        :\r\n        null\r\n      }\r\n    </Card.Section>\r\n  )\r\n}\r\n\r\nfunction SetPosition(props){\r\n  const [isSelected,setSelected] = useState(['push-down']);\r\n\r\n  const choices = [\r\n    {label:'Top bar pushes down the rest of the page',value:'push-down'}, //body padding-top equals to the height of the bar, position: absolute\r\n    {label:'Top bar pushes down the rest of the page (always visible while scrolling)', value:'push-down-visible'}, // body padding-top, and position: -webkit-sticky\r\n    {label:'Top bar overlaps top of the page',value:'overlap'}, //no padding-top for body\r\n    {label:'Top bar overlaps top of the page (always visible while scrolling)',value:'overlap-visible'}, //no padding-top for body, and position:sticky\r\n    {\r\n      label:'Manual placement',\r\n      value:'manual',\r\n      renderChildren:(isSelected)=>{\r\n        return (\r\n          isSelected && (\r\n            <div>Place <span style={{font}}>&lt;div id=\"fsb_placeholder\"&gt;&lt;/div&gt;</span> where you prefer in your theme file.</div>\r\n          )\r\n        )\r\n      }}\r\n  ];\r\n\r\n  useEffect(()=>{\r\n    props.handleBarPosition(isSelected);\r\n  },[isSelected])\r\n\r\n  return (\r\n    <Card.Section>\r\n      <ChoiceList \r\n        title={'Select a Display Position: '}\r\n        choices={choices}\r\n        selected={isSelected}\r\n        onChange={(nw) => setSelected(nw)}\r\n      />\r\n    </Card.Section>\r\n  )\r\n}\r\n\r\nclass ContentConfigPage extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {frShGl:30,msgText:{initialMsg1:'Free Shipping on All Orders Over ',initialMsg2:'',prgMsg1:'Only ',prgMsg2:' away from free shipping',achievedMsg:'Free Shipping Worldwide'}}\r\n    this.handleGoalChange = this.handleGoalChange.bind(this);\r\n    this.handleMsgChange = this.handleMsgChange.bind(this);\r\n    this.handleBarLinkChange = this.handleBarLinkChange.bind(this);\r\n  }\r\n\r\n  handleGoalChange(newGoal){\r\n    if(parseFloat(newGoal) >= 0){\r\n      this.setState((state) => {\r\n        return {frShGl:parseFloat(newGoal)}\r\n      },function(){\r\n        this.props.handleContentConfig_goal(this.state.frShGl);\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  handleMsgChange(msg){\r\n    this.setState((state)=>{\r\n      msg = {...state.msgText,...msg};\r\n      return {msgText:msg}\r\n    },function(){\r\n      this.props.handleContentConfig_msg(this.state.msgText)\r\n    });\r\n  };\r\n\r\n  handleBarLinkChange(val){\r\n    let barLinkConfig = {};\r\n    if(typeof val === 'boolean'){\r\n      barLinkConfig.openNew = val;\r\n    }else if(typeof val === 'string'){\r\n      barLinkConfig.url = val;\r\n    }\r\n    this.props.handleContentConfig_link(barLinkConfig);\r\n  }\r\n\r\n  render(){\r\n    const {frShGl} = this.state;\r\n    return (\r\n      <Card Sectioned> \r\n          <FormLayout>\r\n\r\n            <NameField handleName={(name)=> this.props.handleName(name)}/>\r\n\r\n            <FreeShippingGoal handleGoalChange={this.handleGoalChange}/>\r\n\r\n            { frShGl? \r\n              <FormLayout>\r\n                <InitialMsg goal={frShGl} currency=\"$\" handleMsgChange={this.handleMsgChange}/>\r\n                <ProgressMsg goal={frShGl} currency=\"$\" handleMsgChange={this.handleMsgChange} />\r\n              </FormLayout>\r\n              :\r\n              null\r\n            }\r\n            \r\n            <GoalAchieved handleMsgChange={this.handleMsgChange} />\r\n\r\n            <AddLinkToBar handleBarLinkChange={this.handleBarLinkChange} />\r\n\r\n            <SetPosition handleBarPosition={(val)=>this.props.handleBarPosition(val)}/>\r\n\r\n          </FormLayout>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ContentConfigPage;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AASA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AALA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAVA;AAsBA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AATA;AAYA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAQA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAMA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;;;;AAnEA;AACA;AAqEA;;;;A","sourceRoot":""}