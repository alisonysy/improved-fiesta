{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.b4c0eb161aa4072f3bcb.hot-update.js","sources":["webpack:///./snippets/previewBar.js"],"sourcesContent":["\r\nclass PreviewBar extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {}\r\n    this.handleAddedHtml = this.handleAddedHtml.bind(this);\r\n  }\r\n\r\n  handleAddedHtml(userInp){\r\n    // console.log(userInp);\r\n    // if 'link-container' class exists, have a fixed height, hide overflows and alternate the inner content;\r\n    let tagExp = /<\\/(\\w+)>/g;\r\n    let tagNProps = /<(\\w+[-'\"=\\s(\\w)\\:]*)>/g;\r\n    let re, tagWhole ;\r\n    let tagArr = [],tagWhArr=[];\r\n    let classes = userInp.match(/class=\"([-\\w\\s]+)\"/);\r\n    let containerLinkStyle = {};\r\n    while(re= tagExp.exec(userInp)){\r\n      tagArr.push(re[1]);\r\n      if(!re) break;\r\n    }\r\n    while(tagWhole = tagNProps.exec(userInp)){\r\n      tagWhArr.push(tagWhole[1]);\r\n      if(!tagWhole) break;\r\n    }\r\n    console.log(tagWhArr);\r\n    // to parse tagWhArr, make it an array of objects containing tag, prop and children\r\n    tagWhArr.map((item,idx)=>{\r\n      let result,propArr, props,classExp=/([-\\w]+)=\"(.*)\"/g;\r\n      // console.log(classExp.exec(item));\r\n      // [1] is attribute name, [2] is attribute value;\r\n      while(props = classExp.exec(item)){\r\n        \r\n      }\r\n    })\r\n    if(classes){\r\n      classes = classes[1].split(' ');\r\n      if(classes.includes('container-link')){\r\n        containerLinkStyle = {height:'22px',overflow:'hidden'}\r\n      }\r\n    }\r\n    if(userInp) {\r\n      let prop={};\r\n      // if(tag==='a'){\r\n      //   prop['href']='https://wwww.baidu.com'\r\n      //   prop['style']={display:'block',color:'#fff'}\r\n      // }\r\n      for(let n=0;n<tagArr.length;n++){\r\n        switch(tagArr[n]){\r\n          case 'a':\r\n            prop['href']='';\r\n            break;\r\n        \r\n\r\n        }\r\n        return React.createElement(tagArr[n],prop,'any text')\r\n      }\r\n    } \r\n  }\r\n\r\n  render(){\r\n    const {bgColor, ftColor } = this.props.barConfig;\r\n    return (\r\n      <div style={{margin:'20px 0'}}>\r\n        <div style={{padding:'8px 0',position:'relative',backgroundColor:bgColor,color:ftColor}}>\r\n          { this.props.barConfig.goal?\r\n            this.props.barConfig.inpTxt + '$' + this.props.barConfig.goal\r\n            :\r\n            this.props.barConfig.inpTxt\r\n          }\r\n          {/* #question: how to turn user input into raw html */}\r\n          { this.props.barConfig.addedHtml?\r\n              this.handleAddedHtml(this.props.barConfig.addedHtml) \r\n              :\r\n              null\r\n          }\r\n          <div style={{position:'absolute',top:'8px',right:'8px'}}>X</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PreviewBar;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AACA;AAMA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA/EA;AACA;AAiFA;;;;A","sourceRoot":""}