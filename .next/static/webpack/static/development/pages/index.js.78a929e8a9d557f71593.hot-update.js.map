{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.78a929e8a9d557f71593.hot-update.js","sources":["webpack:///./components/customCode.js"],"sourcesContent":["import { Card, Form, FormLayout } from '@shopify/polaris'\r\n\r\nclass CustomCodePage extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      customCode:''\r\n    }\r\n    this.handleCustomCode = this.handleCustomCode.bind(this);\r\n    this.parseCssString = this.parseCssString.bind(this);\r\n  }\r\n\r\n  handleCustomCode(val){\r\n    const self = this;\r\n    let scriptStart = val.indexOf('<script>'), scriptEnd = val.indexOf('</script>'), styleStart = val.indexOf('<style>'), styleEnd = val.indexOf('</style>');\r\n    let scriptTxt, styleTxt;\r\n    if(scriptStart !== -1 && scriptEnd !== -1){\r\n      scriptTxt = val.slice(scriptStart+8,scriptEnd).trim();\r\n    }\r\n    if(styleStart !== -1 && styleEnd !== -1){\r\n      styleTxt = val.slice(styleStart+7,styleEnd).trim();\r\n    };\r\n    if(this.state.timer){\r\n      clearTimeout(this.state.timer);\r\n    };\r\n    this.setState(()=>{\r\n      let timerN = setTimeout(() => {\r\n        console.log('codes are sent');\r\n        self.props.handleCustomCode(scriptTxt,styleTxt);\r\n      }, 5000);\r\n      return {timer:timerN}\r\n    });\r\n    \r\n  }\r\n\r\n  parseCssString(code){\r\n    let style = code,selectors=[];\r\n    if(!style) return;\r\n    let styleArr = style.split('}');\r\n    let sl_regExp = /(.+)\\s*{/;\r\n    styleArr.map( i => {\r\n      if(i.trim()!==''){\r\n        let re = i.match(sl_regExp);\r\n        if(re){\r\n          let selector = re[1],selectorObj={};\r\n          let propStr =  i.slice(selector.length+1);\r\n          propStr = propStr.split(';');\r\n          if(propStr.length){\r\n            propStr = propStr.map( i => {\r\n              let prop_name,prop_val,reg=/.+/;\r\n              //handle extra {\r\n              let a = i.indexOf('{');\r\n              a !== -1 ? \r\n              i=i.slice(a+1)\r\n              :\r\n              i=i;\r\n              //handle carriage return\r\n              if(!i.match(reg)) return;\r\n              i = i.match(reg)[0];              \r\n              //handle colons inside property value;\r\n              let notUrl = /:[^\\/]/;\r\n              let re_notUrl = i.match(notUrl);\r\n              if(!re_notUrl) return;\r\n              prop_name = i.substring(0,re_notUrl.index);\r\n              prop_val = i.substring(re_notUrl.index+1);\r\n              selectorObj[prop_name] = prop_val;\r\n            });\r\n            selectors.push({[selector]:selectorObj})\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return selectors;\r\n  };\r\n\r\n  render(){\r\n    return (\r\n      <Card>\r\n        <Form>\r\n          <FormLayout>\r\n            <div style={{fontSize:'18px',padding:'1.5em 0 0 1em'}}>Custom Codes</div>\r\n            <Card sectioned></Card>\r\n            <textarea rows=\"10\" cols=\"80\" placeholder=\"Please put your custom codes here...\" \r\n              style={{marginLeft:'1em',border:'1px solid #bbb',borderRadius:'5px',width:'calc(100% - 2em)',marginBottom:'2em'}} \r\n              onChange={(evt) => {\r\n                evt.persist();\r\n                this.setState({timer:null})\r\n                this.handleCustomCode(evt.nativeEvent.target.value)\r\n              }}\r\n            />\r\n          </FormLayout>\r\n        </Form>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CustomCodePage;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AANA;AAOA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AANA;AAYA;;;;AA5FA;AACA;AA8FA;;;;A","sourceRoot":""}