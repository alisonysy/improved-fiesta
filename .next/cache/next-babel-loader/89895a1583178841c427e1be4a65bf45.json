{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nclass PreviewBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.htmlRef = React.createRef();\n    this.handleAddedHtml = this.handleAddedHtml.bind(this);\n    this.injectHtml = this.injectHtml.bind(this);\n  }\n\n  handleAddedHtml(userInp) {\n    // if 'link-container' class exists, have a fixed height, hide overflows and alternate the inner content;\n    let tagExp = /<\\/(\\w+)>/g;\n    let tagNProps = /<(\\w+['\"=\\s(\\w)\\:\\;\\{\\}\\/\\.\\-]*)>/g;\n    let re, tagWhole;\n    let tagArr = [],\n        tagWhArr = [];\n    let classes = userInp.match(/class=\"([-\\w\\s]+)\"/);\n    let containerLinkStyle = {};\n\n    while (re = tagExp.exec(userInp)) {\n      tagArr.push(re[1]);\n      if (!re) break;\n    }\n\n    while (tagWhole = tagNProps.exec(userInp)) {\n      tagWhArr.push(tagWhole[1]);\n      if (!tagWhole) break;\n    } // to parse tagWhArr, make it an array of objects containing tag, prop and children\n\n\n    tagWhArr.map((item, idx, arr) => {\n      let result = {},\n          propArr = [],\n          props,\n          propExp = /([-\\w]+)=\"(['\"\\s\\w\\:\\;\\/\\.\\-]*)\"/g,\n          tagExp = /(\\w+)[\\s]+/; // if item.match(tagExp) is null, then tag is item, otherwise, tag is item.match(tagExp)[1]\n\n      result.tag = !item.match(tagExp) ? item : item.match(tagExp)[1];\n\n      while (props = propExp.exec(item)) {\n        propArr.push({\n          propertyName: props[1],\n          propertyValue: props[2]\n        });\n        if (!props) break;\n      }\n\n      ;\n      result.properties = propArr;\n      arr[idx] = result;\n    });\n\n    if (classes) {\n      classes = classes[1].split(' ');\n\n      if (classes.includes('container-link')) {\n        containerLinkStyle = {\n          height: '22px',\n          overflow: 'hidden'\n        };\n      }\n    }\n\n    if (userInp) {\n      let prop = {};\n\n      for (let n = 0; n < tagArr.length; n++) {\n        switch (tagArr[n]) {\n          case 'a':\n            prop['href'] = '';\n            break;\n        }\n\n        return React.createElement(tagArr[n], prop, 'any text');\n      }\n    }\n  }\n\n  componentDidMount() {\n    console.log('component mounted');\n    this.htmlRef;\n  }\n\n  componentDidUpdate() {\n    console.log('component updated');\n  }\n\n  injectHtml(html) {\n    let contExp = /link\\-container/;\n    let havCont = contExp.test(html);\n\n    if (havCont) {}\n\n    console.log('injected');\n    return __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: html\n      },\n      ref: this.htmlRef\n    });\n  }\n\n  render() {\n    const {\n      bgColor,\n      ftColor\n    } = this.props.barConfig;\n    return __jsx(\"div\", {\n      style: {\n        margin: '20px 0'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        padding: '8px 0',\n        position: 'relative',\n        backgroundColor: bgColor,\n        color: ftColor\n      }\n    }, this.props.barConfig.goal ? this.props.barConfig.inpTxt + '$' + this.props.barConfig.goal : this.props.barConfig.inpTxt, this.props.barConfig.addedHtml ? this.injectHtml(this.props.barConfig.addedHtml) : null, __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '8px',\n        right: '8px'\n      }\n    }, \"X\")));\n  }\n\n}\n\nexport default PreviewBar;","map":{"version":3,"sources":["C:\\Users\\Administrator.SC-201903211547\\projects\\0919\\sample-embedded-app\\snippets\\previewBar.js"],"names":["PreviewBar","React","Component","constructor","props","state","htmlRef","createRef","handleAddedHtml","bind","injectHtml","userInp","tagExp","tagNProps","re","tagWhole","tagArr","tagWhArr","classes","match","containerLinkStyle","exec","push","map","item","idx","arr","result","propArr","propExp","tag","propertyName","propertyValue","properties","split","includes","height","overflow","prop","n","length","createElement","componentDidMount","console","log","componentDidUpdate","html","contExp","havCont","test","__html","render","bgColor","ftColor","barConfig","margin","padding","position","backgroundColor","color","goal","inpTxt","addedHtml","top","right"],"mappings":"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","sourcesContent":["\r\nclass PreviewBar extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {};\r\n    this.htmlRef = React.createRef();\r\n    this.handleAddedHtml = this.handleAddedHtml.bind(this);\r\n    this.injectHtml = this.injectHtml.bind(this);\r\n  }\r\n\r\n  handleAddedHtml(userInp){\r\n    // if 'link-container' class exists, have a fixed height, hide overflows and alternate the inner content;\r\n    let tagExp = /<\\/(\\w+)>/g;\r\n    let tagNProps = /<(\\w+['\"=\\s(\\w)\\:\\;\\{\\}\\/\\.\\-]*)>/g;\r\n    let re, tagWhole ;\r\n    let tagArr = [],tagWhArr=[];\r\n    let classes = userInp.match(/class=\"([-\\w\\s]+)\"/);\r\n    let containerLinkStyle = {};\r\n    while(re= tagExp.exec(userInp)){\r\n      tagArr.push(re[1]);\r\n      if(!re) break;\r\n    }\r\n    while(tagWhole = tagNProps.exec(userInp)){\r\n      tagWhArr.push(tagWhole[1]);\r\n      if(!tagWhole) break;\r\n    }\r\n    // to parse tagWhArr, make it an array of objects containing tag, prop and children\r\n    tagWhArr.map((item,idx,arr)=>{\r\n      let result={},propArr=[], props,propExp=/([-\\w]+)=\"(['\"\\s\\w\\:\\;\\/\\.\\-]*)\"/g,tagExp=/(\\w+)[\\s]+/;\r\n      // if item.match(tagExp) is null, then tag is item, otherwise, tag is item.match(tagExp)[1]\r\n      result.tag = !item.match(tagExp)? item : item.match(tagExp)[1];\r\n      while(props = propExp.exec(item)){\r\n        propArr.push({propertyName:props[1],propertyValue:props[2]});\r\n        if(!props) break;\r\n      };\r\n      result.properties = propArr;\r\n      arr[idx] = result;\r\n    })\r\n    if(classes){\r\n      classes = classes[1].split(' ');\r\n      if(classes.includes('container-link')){\r\n        containerLinkStyle = {height:'22px',overflow:'hidden'}\r\n      }\r\n    }\r\n    if(userInp) {\r\n      let prop={};\r\n      for(let n=0;n<tagArr.length;n++){\r\n        switch(tagArr[n]){\r\n          case 'a':\r\n            prop['href']='';\r\n            break;\r\n        \r\n\r\n        }\r\n        return React.createElement(tagArr[n],prop,'any text')\r\n      }\r\n    } \r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log('component mounted');\r\n    this.htmlRef\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    console.log('component updated')\r\n  }\r\n\r\n  injectHtml(html){\r\n    let contExp = /link\\-container/;\r\n    let havCont = contExp.test(html);\r\n    if(havCont){\r\n\r\n    }\r\n    console.log('injected')\r\n    return (\r\n      <div dangerouslySetInnerHTML={{__html:html}} ref={this.htmlRef}></div>\r\n    )\r\n  }\r\n\r\n  render(){\r\n    const {bgColor, ftColor } = this.props.barConfig;\r\n    return (\r\n      <div style={{margin:'20px 0'}}>\r\n        <div style={{padding:'8px 0',position:'relative',backgroundColor:bgColor,color:ftColor}}>\r\n          { this.props.barConfig.goal?\r\n            this.props.barConfig.inpTxt + '$' + this.props.barConfig.goal\r\n            :\r\n            this.props.barConfig.inpTxt\r\n          }\r\n          {/* #question: how to turn user input into raw html */}\r\n          { this.props.barConfig.addedHtml?\r\n              this.injectHtml(this.props.barConfig.addedHtml) \r\n              :\r\n              null\r\n          }\r\n          <div style={{position:'absolute',top:'8px',right:'8px'}}>X</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PreviewBar;"]},"metadata":{},"sourceType":"module"}