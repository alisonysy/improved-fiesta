{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Card, DatePicker, ChoiceList } from '@shopify/polaris';\nimport { useCallback, useState, useEffect } from 'react';\n\nfunction Choose(props) {\n  const {\n    0: selected,\n    1: setSelected\n  } = useState(['always']);\n  const handleChange = useCallback(value => setSelected(value), []);\n  const renderDatePicker = useCallback(isSelected => isSelected && __jsx(Schedule, null));\n  return __jsx(ChoiceList, {\n    choices: [{\n      label: 'Always display',\n      value: 'always'\n    }, {\n      label: 'Only display within the giving period of time',\n      value: 'scheduled',\n      renderChildren: renderDatePicker\n    }],\n    selected: selected,\n    onChange: handleChange\n  });\n}\n\n;\n\nfunction SelectTime(props) {\n  return __jsx(\"div\", null, __jsx(\"div\", null, \"Please enter the hour(from 0 to 23) and minute(from 0 to 59) that the display \", __jsx(\"strong\", null, \"starts\"), \":\"), __jsx(\"input\", {\n    id: \"selectHour\",\n    type: \"number\",\n    min: 2\n  }), __jsx(\"div\", null, \"Please enter the hour(from 0 to 23) and minute(from 0 to 59) that the display \", __jsx(\"strong\", null, \"ends\"), \":\"), __jsx(\"input\", {\n    id: \"selectHour\",\n    type: \"number\",\n    maxLength: 2\n  }));\n}\n\nfunction Schedule(props) {\n  const {\n    0: {\n      month,\n      year\n    },\n    1: setDate\n  } = useState({\n    month: 9,\n    year: 2019\n  });\n  const {\n    0: selectedDates,\n    1: setSelectedDates\n  } = useState({\n    start: new Date(),\n    end: new Date()\n  });\n  const {\n    0: {\n      leftMon,\n      rightMon\n    },\n    1: setMonth\n  } = useState({\n    leftMon: month + 1,\n    rightMon: month + 2\n  });\n  const handleMonthChange = useCallback((month, year) => {\n    setDate({\n      month,\n      year\n    });\n    setMonth({\n      leftMon: month + 1,\n      rightMon: month + 2\n    });\n  }, []);\n\n  const transpileMonth = month => {\n    month = '' + month;\n\n    switch (month) {\n      case '1':\n        return 'January';\n        break;\n\n      case '2':\n        return 'Feburary';\n        break;\n\n      case '3':\n        return 'March';\n        break;\n\n      case '4':\n        return 'April';\n\n      case '5':\n        return 'May';\n\n      case '6':\n        return 'June';\n\n      case '7':\n        return 'July';\n\n      case '8':\n        return 'August';\n\n      case '9':\n        return 'September';\n\n      case '10':\n        return 'October';\n\n      case '11':\n        return 'November';\n\n      case '12':\n        return 'December';\n\n      case '13':\n        return 'January';\n    }\n  };\n\n  useEffect(() => {\n    console.log('selected dates are', selectedDates);\n  }, [selectedDates]);\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexFlow: 'row nowrap',\n      justifyContent: 'stretch'\n    }\n  }, __jsx(\"div\", {\n    style: {\n      width: '50%',\n      textAlign: 'center'\n    }\n  }, transpileMonth(leftMon)), __jsx(\"div\", {\n    style: {\n      width: '50%',\n      textAlign: 'center'\n    }\n  }, transpileMonth(rightMon))), __jsx(DatePicker, {\n    month: month,\n    year: year,\n    onChange: setSelectedDates,\n    onMonthChange: handleMonthChange,\n    selected: selectedDates,\n    multiMonth: true,\n    allowRange: true\n  }));\n}\n\nclass DisplaySchedule extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return __jsx(Card.Section, null, __jsx(\"div\", {\n      style: {\n        marginBottom: '1em',\n        fontSize: '1.1em'\n      }\n    }, \"Display schedule:\"), __jsx(Choose, null), __jsx(SelectTime, null), __jsx(\"div\", null, \"Define the Start Time and End Time of the display period.\"));\n  }\n\n}\n\nexport default DisplaySchedule;","map":{"version":3,"sources":["C:\\Users\\Administrator.SC-201903211547\\projects\\0919\\sample-embedded-app\\snippets\\displaySchedule.js"],"names":["Card","DatePicker","ChoiceList","useCallback","useState","useEffect","Choose","props","selected","setSelected","handleChange","value","renderDatePicker","isSelected","label","renderChildren","SelectTime","Schedule","month","year","setDate","selectedDates","setSelectedDates","start","Date","end","leftMon","rightMon","setMonth","handleMonthChange","transpileMonth","console","log","display","flexFlow","justifyContent","width","textAlign","DisplaySchedule","React","Component","constructor","state","render","marginBottom","fontSize"],"mappings":"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","sourcesContent":["import {Card, DatePicker, ChoiceList} from '@shopify/polaris';\r\nimport {useCallback, useState, useEffect}  from 'react';\r\n\r\nfunction Choose(props){\r\n  const [selected, setSelected] = useState(['always']);\r\n\r\n  const handleChange = useCallback((value) => setSelected(value), []);\r\n\r\n  const renderDatePicker = useCallback(\r\n    (isSelected) =>\r\n      isSelected && (\r\n        <Schedule />\r\n      )\r\n  )\r\n\r\n  return (\r\n    <ChoiceList\r\n      choices={[\r\n        {label: 'Always display', value: 'always'},\r\n        {label: 'Only display within the giving period of time', value: 'scheduled',renderChildren:renderDatePicker},\r\n      ]}\r\n      selected={selected}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nfunction SelectTime(props){\r\n  return (\r\n    <div>\r\n      <div>Please enter the hour(from 0 to 23) and minute(from 0 to 59) that the display <strong>starts</strong>:</div>\r\n      <input id=\"selectHour\" type='number' min={2} />\r\n      <div>Please enter the hour(from 0 to 23) and minute(from 0 to 59) that the display <strong>ends</strong>:</div>\r\n      <input id=\"selectHour\" type='number' maxLength={2} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Schedule(props){\r\n  const [{ month, year }, setDate] = useState({\r\n    month: 9,\r\n    year: 2019\r\n  });\r\n  const [selectedDates, setSelectedDates] = useState({\r\n    start: new Date(),\r\n    end: new Date()\r\n  });\r\n  const [{leftMon,rightMon},setMonth] = useState({\r\n    leftMon:month+1,\r\n    rightMon:month+2\r\n  })\r\n\r\n  const handleMonthChange = useCallback((month, year) => {\r\n    setDate({ month, year });\r\n    setMonth({leftMon:month+1,rightMon:month+2})\r\n  }, []);\r\n\r\n  const transpileMonth = (month) => {\r\n    month = ''+month;\r\n    switch(month){\r\n      case '1':\r\n        return 'January';\r\n        break;\r\n      case '2':\r\n        return 'Feburary';\r\n        break;\r\n      case '3':\r\n        return 'March';\r\n        break;\r\n      case '4':\r\n        return 'April';\r\n      case '5':\r\n        return 'May';\r\n      case '6':\r\n        return 'June';\r\n      case '7':\r\n        return 'July';\r\n      case '8':\r\n        return 'August';\r\n      case '9':\r\n        return 'September';\r\n      case '10':\r\n        return 'October';\r\n      case '11':\r\n        return 'November';\r\n      case '12':\r\n        return 'December';\r\n      case '13':\r\n        return 'January';\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    console.log('selected dates are',selectedDates)\r\n  },[selectedDates])\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div style={{display:'flex',flexFlow:'row nowrap',justifyContent:'stretch'}}>\r\n        <div style={{width:'50%',textAlign:'center'}}>{transpileMonth(leftMon)}</div>\r\n        <div style={{width:'50%',textAlign:'center'}}>{transpileMonth(rightMon)}</div>\r\n      </div>\r\n      <DatePicker \r\n      month={month} \r\n      year={year} \r\n      onChange={setSelectedDates} \r\n      onMonthChange={handleMonthChange} \r\n      selected={selectedDates} \r\n      multiMonth={true} \r\n      allowRange={true} \r\n    />\r\n    </div>\r\n  );\r\n}\r\n\r\nclass DisplaySchedule extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={}\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <Card.Section>\r\n        <div style={{marginBottom:'1em',fontSize:'1.1em'}}>Display schedule:</div>\r\n        <Choose />\r\n        <SelectTime />\r\n        <div>Define the Start Time and End Time of the display period.</div>\r\n      </Card.Section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DisplaySchedule;"]},"metadata":{},"sourceType":"module"}