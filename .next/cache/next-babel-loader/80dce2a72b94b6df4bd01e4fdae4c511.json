{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { DropZone, Banner, Stack, List, Thumbnail, Caption } from '@shopify/polaris';\n\nclass ImageDropZone extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: [],\n      rejectedFiles: [],\n      hasError: false\n    };\n  }\n\n  render() {\n    const {\n      files,\n      hasError,\n      rejectedFiles\n    } = this.state;\n\n    const fileUpload = !files.length && __jsx(DropZone.FileUpload, null);\n\n    const uploadedFiles = files.length > 0 && __jsx(Stack, {\n      vertical: true\n    }, files.map((file, index) => __jsx(Stack, {\n      alignment: \"center\",\n      key: index\n    }, __jsx(Thumbnail, {\n      size: \"small\",\n      alt: file.name,\n      source: window.URL.createObjectURL(file)\n    }), __jsx(\"div\", null, file.name, \" \", __jsx(Caption, null, file.size, \" bytes\")))));\n\n    const errorMessage = hasError && __jsx(Banner, {\n      title: \"The following images couldn\\u2019t be uploaded:\",\n      status: \"critical\"\n    }, __jsx(List, {\n      type: \"bullet\"\n    }, rejectedFiles.map((file, index) => __jsx(List.Item, {\n      key: index\n    }, `\"${file.name}\" is not supported. File type must be .gif, .jpg, .png or .svg.`))));\n\n    return __jsx(Stack, {\n      vertical: true\n    }, errorMessage, __jsx(DropZone, {\n      accept: \"image/*\",\n      type: \"image\",\n      onDrop: (files, acceptedFiles, rejectedFiles) => {\n        this.setState({\n          files: [...this.state.files, ...acceptedFiles],\n          rejectedFiles: rejectedFiles,\n          hasError: rejectedFiles.length > 0\n        });\n      },\n      label: \"Click the drop zone to continue uploading more images: \"\n    }, uploadedFiles, fileUpload));\n  }\n\n}\n\nexport default ImageDropZone;","map":{"version":3,"sources":["C:\\Users\\Administrator.SC-201903211547\\projects\\0919\\sample-embedded-app\\snippets\\imageDropZone.js"],"names":["DropZone","Banner","Stack","List","Thumbnail","Caption","ImageDropZone","React","Component","constructor","props","state","files","rejectedFiles","hasError","render","fileUpload","length","uploadedFiles","map","file","index","name","window","URL","createObjectURL","size","errorMessage","acceptedFiles","setState"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwCC,SAAxC,EAAmDC,OAAnD,QAAkE,kBAAlE;;AAEA,MAAMC,aAAN,SAA4BC,KAAK,CAACC,SAAlC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,aAAa,EAAE,EAFJ;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKD;;AAEDC,EAAAA,MAAM,GAAE;AACN,UAAM;AAACH,MAAAA,KAAD;AAAQE,MAAAA,QAAR;AAAkBD,MAAAA;AAAlB,QAAmC,KAAKF,KAA9C;;AAEA,UAAMK,UAAU,GAAG,CAACJ,KAAK,CAACK,MAAP,IAAiB,MAAC,QAAD,CAAU,UAAV,OAApC;;AACA,UAAMC,aAAa,GAAGN,KAAK,CAACK,MAAN,GAAe,CAAf,IACpB,MAAC,KAAD;AAAO,MAAA,QAAQ;AAAf,OACGL,KAAK,CAACO,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KACT,MAAC,KAAD;AAAO,MAAA,SAAS,EAAC,QAAjB;AAA0B,MAAA,GAAG,EAAEA;AAA/B,OACE,MAAC,SAAD;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,GAAG,EAAED,IAAI,CAACE,IAFZ;AAGE,MAAA,MAAM,EAAEC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BL,IAA3B;AAHV,MADF,EAME,mBACGA,IAAI,CAACE,IADR,OACc,MAAC,OAAD,QAAUF,IAAI,CAACM,IAAf,WADd,CANF,CADD,CADH,CADF;;AAiBA,UAAMC,YAAY,GAAGb,QAAQ,IAC3B,MAAC,MAAD;AACE,MAAA,KAAK,EAAC,iDADR;AAEE,MAAA,MAAM,EAAC;AAFT,OAIE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC;AAAX,OACGD,aAAa,CAACM,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,KACjB,MAAC,IAAD,CAAM,IAAN;AAAW,MAAA,GAAG,EAAEA;AAAhB,OACI,IAAGD,IAAI,CAACE,IAAK,iEADjB,CADD,CADH,CAJF,CADF;;AAeA,WACE,MAAC,KAAD;AAAO,MAAA,QAAQ;AAAf,OACGK,YADH,EAEE,MAAC,QAAD;AACE,MAAA,MAAM,EAAC,SADT;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,MAAM,EAAE,CAACf,KAAD,EAAQgB,aAAR,EAAuBf,aAAvB,KAAyC;AAC/C,aAAKgB,QAAL,CAAc;AACZjB,UAAAA,KAAK,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,EAAsB,GAAGgB,aAAzB,CADK;AAEZf,UAAAA,aAAa,EAAEA,aAFH;AAGZC,UAAAA,QAAQ,EAAED,aAAa,CAACI,MAAd,GAAuB;AAHrB,SAAd;AAKD,OATH;AAUE,MAAA,KAAK,EAAC;AAVR,OAYGC,aAZH,EAaGF,UAbH,CAFF,CADF;AAoBD;;AAlEwC;;AAqE3C,eAAeV,aAAf","sourcesContent":["import { DropZone, Banner, Stack, List, Thumbnail, Caption } from '@shopify/polaris';\r\n\r\nclass ImageDropZone extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      files: [],\r\n      rejectedFiles: [],\r\n      hasError: false,\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const {files, hasError, rejectedFiles} = this.state;\r\n\r\n    const fileUpload = !files.length && <DropZone.FileUpload />;\r\n    const uploadedFiles = files.length > 0 && (\r\n      <Stack vertical>\r\n        {files.map((file, index) => (\r\n          <Stack alignment=\"center\" key={index}>\r\n            <Thumbnail\r\n              size=\"small\"\r\n              alt={file.name}\r\n              source={window.URL.createObjectURL(file)}\r\n            />\r\n            <div>\r\n              {file.name} <Caption>{file.size} bytes</Caption>\r\n            </div>\r\n          </Stack>\r\n        ))}\r\n      </Stack>\r\n    );\r\n\r\n    const errorMessage = hasError && (\r\n      <Banner\r\n        title=\"The following images couldnâ€™t be uploaded:\"\r\n        status=\"critical\"\r\n      >\r\n        <List type=\"bullet\">\r\n          {rejectedFiles.map((file, index) => (\r\n            <List.Item key={index}>\r\n              {`\"${file.name}\" is not supported. File type must be .gif, .jpg, .png or .svg.`}\r\n            </List.Item>\r\n          ))}\r\n        </List>\r\n      </Banner>\r\n    );\r\n\r\n    return (\r\n      <Stack vertical>\r\n        {errorMessage}\r\n        <DropZone\r\n          accept=\"image/*\"\r\n          type=\"image\"\r\n          onDrop={(files, acceptedFiles, rejectedFiles) => {\r\n            this.setState({\r\n              files: [...this.state.files, ...acceptedFiles],\r\n              rejectedFiles: rejectedFiles,\r\n              hasError: rejectedFiles.length > 0,\r\n            });\r\n          }}\r\n          label=\"Click the drop zone to continue uploading more images: \"\r\n        >\r\n          {uploadedFiles}\r\n          {fileUpload}\r\n        </DropZone>\r\n      </Stack>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageDropZone;"]},"metadata":{},"sourceType":"module"}