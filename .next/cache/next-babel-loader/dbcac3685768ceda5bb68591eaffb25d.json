{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nclass PreviewBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.htmlRef = React.createRef();\n    this.injectHtml = this.injectHtml.bind(this);\n  }\n\n  componentDidMount() {\n    let injectedHtmlElCollection = this.htmlRef.current.children; // object\n\n    for (let n = 0; n < injectedHtmlElCollection.length; n++) {\n      let el = injectedHtmlElCollection[n];\n\n      if (el.classList.contains('link-container')) {\n        el.setAttribute(\"style\", \"height:22px;overflow:hidden\");\n\n        if (el.children[0].tagName === 'UL') {\n          let ul = el.children[0];\n          ul.setAttribute(\"style\", \"padding:0;margin:0;list-style:none;\");\n          console.log(ul.clientHeight);\n          ul.setAttribute(\"style\");\n        }\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    console.log('component updated');\n  }\n\n  injectHtml(html) {\n    let contExp = /link\\-container/;\n    let havCont = contExp.test(html);\n\n    if (havCont) {}\n\n    console.log('injected');\n    return __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: html\n      },\n      ref: this.htmlRef\n    });\n  }\n\n  render() {\n    const {\n      bgColor,\n      ftColor\n    } = this.props.barConfig;\n    return __jsx(\"div\", {\n      style: {\n        margin: '20px 0'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        padding: '8px 0',\n        position: 'relative',\n        backgroundColor: bgColor,\n        color: ftColor\n      }\n    }, this.props.barConfig.goal ? this.props.barConfig.inpTxt + '$' + this.props.barConfig.goal : this.props.barConfig.inpTxt, this.props.barConfig.addedHtml ? this.injectHtml(this.props.barConfig.addedHtml) : null, __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '8px',\n        right: '8px'\n      }\n    }, \"X\")));\n  }\n\n}\n\nexport default PreviewBar;","map":{"version":3,"sources":["C:\\Users\\Administrator.SC-201903211547\\projects\\0919\\sample-embedded-app\\snippets\\previewBar.js"],"names":["PreviewBar","React","Component","constructor","props","state","htmlRef","createRef","injectHtml","bind","componentDidMount","injectedHtmlElCollection","current","children","n","length","el","classList","contains","setAttribute","tagName","ul","console","log","clientHeight","componentDidUpdate","html","contExp","havCont","test","__html","render","bgColor","ftColor","barConfig","margin","padding","position","backgroundColor","color","goal","inpTxt","addedHtml","top","right"],"mappings":"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","sourcesContent":["\r\nclass PreviewBar extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {};\r\n    this.htmlRef = React.createRef();\r\n    this.injectHtml = this.injectHtml.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    let injectedHtmlElCollection = this.htmlRef.current.children; // object\r\n    for(let n=0;n<injectedHtmlElCollection.length;n++){\r\n      let el = injectedHtmlElCollection[n];\r\n      if(el.classList.contains('link-container')){\r\n        el.setAttribute(\"style\",\"height:22px;overflow:hidden\");\r\n        if(el.children[0].tagName==='UL'){\r\n          let ul = el.children[0];\r\n          ul.setAttribute(\"style\",\"padding:0;margin:0;list-style:none;\")\r\n          console.log(ul.clientHeight)\r\n          ul.setAttribute(\"style\")\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    console.log('component updated')\r\n  }\r\n\r\n  injectHtml(html){\r\n    let contExp = /link\\-container/;\r\n    let havCont = contExp.test(html);\r\n    if(havCont){\r\n\r\n    }\r\n    console.log('injected')\r\n    return (\r\n      <div dangerouslySetInnerHTML={{__html:html}} ref={this.htmlRef}></div>\r\n    )\r\n  }\r\n\r\n  render(){\r\n    const {bgColor, ftColor } = this.props.barConfig;\r\n    return (\r\n      <div style={{margin:'20px 0'}}>\r\n        <div style={{padding:'8px 0',position:'relative',backgroundColor:bgColor,color:ftColor}}>\r\n          { this.props.barConfig.goal?\r\n            this.props.barConfig.inpTxt + '$' + this.props.barConfig.goal\r\n            :\r\n            this.props.barConfig.inpTxt\r\n          }\r\n          {/* #question: how to turn user input into raw html */}\r\n          { this.props.barConfig.addedHtml?\r\n              this.injectHtml(this.props.barConfig.addedHtml) \r\n              :\r\n              null\r\n          }\r\n          <div style={{position:'absolute',top:'8px',right:'8px'}}>X</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PreviewBar;"]},"metadata":{},"sourceType":"module"}