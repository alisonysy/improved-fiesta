{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Layout, Page, ButtonGroup, Button } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from 'react-apollo';\nimport store from 'store-js';\nimport ResourceListWithProducts from '../components/ResourceList';\nimport BarList from '../components/barList';\nimport TemplateStyle from '../components/templateStyle';\nimport ContentConfigPage from '../components/contentConfig';\nimport StyleConfigPage from '../components/styleConfig';\nimport TargetConfigPage from '../components/targetConfig';\nimport CustomCodePage from '../components/customCode';\nimport PreviewPage from '../components/preview';\nimport script from '../scripts/topBarInjection';\nconst INJECT_SCRIPT = gql`\n  mutation scriptTagCreate($input: ScriptTagInput!) {\n    scriptTagCreate(input: $input) {\n      scriptTag {\n        id\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSelection\", src => {\n      const idsFromSrc = src.selection.map(prod => prod.id);\n      this.setState({\n        open: false\n      });\n      console.log(src);\n      store.set('ids', idsFromSrc);\n    });\n\n    this.state = {\n      open: false,\n      onEdit: false,\n      barTxtConfig: {\n        initialMsg1: '',\n        prgMsg1: '',\n        achievedMsg: ''\n      },\n      barFrShGl: 30,\n      barLink: {\n        url: '',\n        openNew: false\n      },\n      barPosition: '',\n      bgImg: {},\n      styleConfig: {\n        colorConfig: {\n          bgColor: '#000',\n          txtColor: '#b31219',\n          bgOpacity: 100,\n          specialColor: '#fff'\n        },\n        fontConfig: {\n          fontFamily: 'sans-serif'\n        }\n      }\n    };\n    this.handleEditId = this.handleEditId.bind(this);\n  }\n\n  handleEditId(id) {\n    console.log(id);\n    this.setState({\n      onEdit: true\n    });\n  }\n\n  render() {\n    const emptyState = !store.get('ids');\n    const {\n      barTxtConfig,\n      barFrShGl,\n      barLink,\n      styleConfig,\n      bgImg\n    } = this.state;\n    const [injectScriptTag, {\n      data\n    }] = useMutation(INJECT_SCRIPT);\n    return __jsx(Page, null, __jsx(TitleBar, {\n      primaryAction: {\n        content: 'Select prod',\n        onAction: () => this.setState({\n          open: true\n        })\n      }\n    }), __jsx(Layout.Section, null, __jsx(BarList, {\n      handleEditId: id => this.handleEditId(id)\n    }), this.state.onEdit ? __jsx(\"div\", {\n      style: {\n        marginTop: '3em'\n      }\n    }, __jsx(TemplateStyle, null), __jsx(PreviewPage, {\n      contentConfig: {\n        barTxtConfig,\n        barFrShGl,\n        barLink\n      },\n      styleConfig: _objectSpread({}, styleConfig),\n      bgImg: bgImg\n    }), __jsx(ContentConfigPage, {\n      handleContentConfig_msg: msg => this.setState({\n        barTxtConfig: _objectSpread({}, this.barTxtConfig, msg)\n      }),\n      handleContentConfig_goal: gl => this.setState({\n        barFrShGl: gl\n      }),\n      handleContentConfig_link: val => this.setState({\n        barLink: _objectSpread({}, this.state.barLink, val)\n      })\n    }), __jsx(StyleConfigPage, {\n      handleStyleConfig: (colorCf, fontCf) => {\n        this.setState({\n          styleConfig: {\n            colorConfig: colorCf,\n            fontConfig: fontCf\n          }\n        });\n      },\n      uploadBgImg: bgFile => this.setState({\n        bgImg: bgFile\n      })\n    }), __jsx(TargetConfigPage, null), __jsx(CustomCodePage, null), __jsx(ButtonGroup, null, __jsx(Button, null, \"Cancel\"), __jsx(Button, {\n      primary: true,\n      onClick: e => {\n        e.preventDefault();\n        console.log(this.state);\n        injectScriptTag({\n          variables: {\n            input: {\n              displayScope: 'ONLINE_STORE',\n              src: ''\n            }\n          }\n        });\n      }\n    }, \"Save\"))) : null));\n  }\n\n}\n\n;\nexport default Index;","map":{"version":3,"sources":["C:\\Users\\Administrator.SC-201903211547\\projects\\0919\\sample-embedded-app\\pages\\index.js"],"names":["Layout","Page","ButtonGroup","Button","ResourcePicker","TitleBar","gql","useMutation","store","ResourceListWithProducts","BarList","TemplateStyle","ContentConfigPage","StyleConfigPage","TargetConfigPage","CustomCodePage","PreviewPage","script","INJECT_SCRIPT","Index","React","Component","constructor","props","src","idsFromSrc","selection","map","prod","id","setState","open","console","log","set","state","onEdit","barTxtConfig","initialMsg1","prgMsg1","achievedMsg","barFrShGl","barLink","url","openNew","barPosition","bgImg","styleConfig","colorConfig","bgColor","txtColor","bgOpacity","specialColor","fontConfig","fontFamily","handleEditId","bind","render","emptyState","get","injectScriptTag","data","content","onAction","marginTop","msg","gl","val","colorCf","fontCf","bgFile","e","preventDefault","variables","input","displayScope"],"mappings":"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","sourcesContent":["import { Layout, Page, ButtonGroup, Button } from '@shopify/polaris';\r\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from 'react-apollo';\r\nimport store from 'store-js';\r\n\r\nimport ResourceListWithProducts from '../components/ResourceList';\r\nimport BarList from '../components/barList';\r\nimport TemplateStyle from '../components/templateStyle';\r\nimport ContentConfigPage from '../components/contentConfig';\r\nimport StyleConfigPage from '../components/styleConfig';\r\nimport TargetConfigPage from '../components/targetConfig';\r\nimport CustomCodePage from '../components/customCode';\r\nimport PreviewPage from '../components/preview';\r\n\r\nimport script from '../scripts/topBarInjection'\r\n\r\nconst INJECT_SCRIPT = gql`\r\n  mutation scriptTagCreate($input: ScriptTagInput!) {\r\n    scriptTagCreate(input: $input) {\r\n      scriptTag {\r\n        id\r\n      }\r\n      userErrors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nclass Index extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n      onEdit:false,\r\n      barTxtConfig:{initialMsg1:'',prgMsg1:'',achievedMsg:''},\r\n      barFrShGl:30,\r\n      barLink:{url:'',openNew:false},\r\n      barPosition:'',\r\n      bgImg:{},\r\n      styleConfig:{colorConfig:{bgColor:'#000',txtColor:'#b31219',bgOpacity:100,specialColor:'#fff'},fontConfig:{fontFamily:'sans-serif'}}\r\n    };\r\n    this.handleEditId = this.handleEditId.bind(this);\r\n  }\r\n\r\n  handleEditId(id){\r\n    console.log(id);\r\n    this.setState({onEdit:true});\r\n  }\r\n\r\n  render(){\r\n    const emptyState = !store.get('ids');\r\n    const {barTxtConfig,barFrShGl,barLink,styleConfig,bgImg} = this.state;\r\n    const [injectScriptTag, {data}] = useMutation(INJECT_SCRIPT);\r\n    return (\r\n      <Page>\r\n        <TitleBar \r\n          primaryAction={{\r\n            content:'Select prod',\r\n            onAction: () => this.setState({ open: true }),\r\n          }}\r\n        />\r\n        {/* <ResourcePicker \r\n          resourceType=\"Product\"\r\n          showVariants={true}\r\n          open={this.state.open}\r\n          onSelection={(src)=> this.handleSelection(src)}\r\n          onCancel={ () => this.setState({ open: false })}\r\n        /> */}\r\n        <Layout.Section>\r\n          <BarList handleEditId={(id) => this.handleEditId(id)}/>\r\n          {\r\n            this.state.onEdit?\r\n            <div style={{marginTop:'3em'}}>\r\n              <TemplateStyle />\r\n              <PreviewPage \r\n                contentConfig={{barTxtConfig,barFrShGl,barLink}} \r\n                styleConfig = {{...styleConfig}}\r\n                bgImg = {bgImg}\r\n              />\r\n              <ContentConfigPage \r\n                handleContentConfig_msg={(msg)=> this.setState({barTxtConfig:{...this.barTxtConfig,...msg}})} \r\n                handleContentConfig_goal={(gl) => this.setState({barFrShGl:gl})}\r\n                handleContentConfig_link={(val)=> this.setState({barLink:{...this.state.barLink,...val}})}\r\n              />\r\n              <StyleConfigPage \r\n                handleStyleConfig={(colorCf,fontCf) => {\r\n                  this.setState({styleConfig:{colorConfig:colorCf,fontConfig:fontCf}})\r\n                }}\r\n                uploadBgImg={(bgFile) => this.setState({bgImg:bgFile})}\r\n              />\r\n              <TargetConfigPage />\r\n              <CustomCodePage />\r\n              <ButtonGroup>\r\n                <Button>Cancel</Button>\r\n                <Button primary \r\n                  onClick={(e)=>{\r\n                    e.preventDefault();\r\n                    console.log(this.state);\r\n                    injectScriptTag({variables:{input:{displayScope:'ONLINE_STORE',src:''}}})\r\n                  }}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </ButtonGroup>\r\n            </div>\r\n            :\r\n            null\r\n          }\r\n        </Layout.Section>\r\n      </Page>\r\n    )\r\n  };\r\n\r\n  handleSelection = (src) => {\r\n    const idsFromSrc = src.selection.map((prod)=> prod.id);\r\n    this.setState({ open: false })\r\n    console.log(src);\r\n    store.set('ids',idsFromSrc)\r\n  }\r\n};\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}