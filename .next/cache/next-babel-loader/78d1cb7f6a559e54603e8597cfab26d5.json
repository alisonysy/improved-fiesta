{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nvar PreviewBar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PreviewBar, _React$Component);\n\n  function PreviewBar(props) {\n    var _this;\n\n    _classCallCheck(this, PreviewBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PreviewBar).call(this, props));\n    _this.state = {\n      animReq: null\n    };\n    _this.htmlRef = React.createRef();\n    _this.injectHtml = _this.injectHtml.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(PreviewBar, [{\n    key: \"setAnimation\",\n    value: function setAnimation(el) {\n      var keyframeEl = document.createElement('style');\n      keyframeEl.textContent = \"\\n      @keyframes infiniteSlide{\\n          from {\\n            margin-top:0\\n          }\\n          to {\\n            margin-top: -22px\\n          }\\n      }\\n    \";\n      el.insertAdjacentElement('afterbegin', keyframeEl);\n      el.setAttribute('style', \"padding:0;margin:0;list-style:none;transition:all 2.5s;animation:infiniteSlide 2.5s;\");\n      el.addEventListener('animationend', function () {\n        el.style.animation = '';\n        void el.offsetWidth;\n        var elNode = el.children[0].parentNode;\n        var firstChild = elNode.querySelector(childToQuery);\n        var clonedFirstChild = firstChild.cloneNode(true);\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var injectedHtmlElCollection = this.htmlRef.current.children; // object\n\n      for (var n = 0; n < injectedHtmlElCollection.length; n++) {\n        var el = injectedHtmlElCollection[n];\n\n        if (el.classList.contains('link-container')) {\n          el.setAttribute(\"style\", \"height:22px;overflow:hidden;line-height:22px;\");\n\n          if (el.children[0].tagName === 'UL') {\n            (function () {\n              var ul = el.children[0];\n              var keyframeEl = document.createElement('style');\n              keyframeEl.textContent = \"\\n            @keyframes infiniteSlide{\\n                from {\\n                  margin-top:0\\n                }\\n                to {\\n                  margin-top: -22px\\n                }\\n            }\\n          \";\n              ul.insertAdjacentElement('afterbegin', keyframeEl);\n              ul.setAttribute(\"style\", \"padding:0;margin:0;list-style:none;transition:all 2.5s;animation:infiniteSlide 2.5s;\");\n              ul.addEventListener('animationend', function () {\n                ul.style.animation = '';\n                void ul.offsetWidth;\n                var ulNode = ul.children[0].parentNode;\n                var firstLi = ulNode.querySelector('li');\n                var clonedFirstLi = firstLi.cloneNode(true);\n                ulNode.insertAdjacentElement('beforeend', clonedFirstLi);\n                ulNode.removeChild(firstLi);\n                ul.style.animation = 'infiniteSlide 2.5s';\n              });\n            })();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log('component updated');\n    }\n  }, {\n    key: \"injectHtml\",\n    value: function injectHtml(html) {\n      var contExp = /link\\-container/;\n      var havCont = contExp.test(html);\n\n      if (havCont) {}\n\n      console.log('injected');\n      return __jsx(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: html\n        },\n        ref: this.htmlRef\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$barConfig = this.props.barConfig,\n          bgColor = _this$props$barConfig.bgColor,\n          ftColor = _this$props$barConfig.ftColor;\n      return __jsx(\"div\", {\n        style: {\n          margin: '20px 0'\n        }\n      }, __jsx(\"div\", {\n        style: {\n          padding: '8px 0',\n          position: 'relative',\n          backgroundColor: bgColor,\n          color: ftColor\n        }\n      }, this.props.barConfig.goal ? this.props.barConfig.inpTxt + '$' + this.props.barConfig.goal : this.props.barConfig.inpTxt, this.props.barConfig.addedHtml ? this.injectHtml(this.props.barConfig.addedHtml) : null, __jsx(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '8px',\n          right: '8px'\n        }\n      }, \"X\")));\n    }\n  }]);\n\n  return PreviewBar;\n}(React.Component);\n\nexport default PreviewBar;","map":{"version":3,"sources":["C:\\Users\\Administrator.SC-201903211547\\projects\\0919\\sample-embedded-app\\snippets\\previewBar.js"],"names":["PreviewBar","props","state","animReq","htmlRef","React","createRef","injectHtml","bind","el","keyframeEl","document","createElement","textContent","insertAdjacentElement","setAttribute","addEventListener","style","animation","offsetWidth","elNode","children","parentNode","firstChild","querySelector","childToQuery","clonedFirstChild","cloneNode","injectedHtmlElCollection","current","n","length","classList","contains","tagName","ul","ulNode","firstLi","clonedFirstLi","removeChild","console","log","html","contExp","havCont","test","__html","barConfig","bgColor","ftColor","margin","padding","position","backgroundColor","color","goal","inpTxt","addedHtml","top","right","Component"],"mappings":"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","sourcesContent":["\r\nclass PreviewBar extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {animReq:null};\r\n    this.htmlRef = React.createRef();\r\n    this.injectHtml = this.injectHtml.bind(this);\r\n  }\r\n\r\n  setAnimation(el){\r\n    let keyframeEl = document.createElement('style');\r\n    keyframeEl.textContent = `\r\n      @keyframes infiniteSlide{\r\n          from {\r\n            margin-top:0\r\n          }\r\n          to {\r\n            margin-top: -22px\r\n          }\r\n      }\r\n    `;\r\n    el.insertAdjacentElement('afterbegin',keyframeEl);\r\n    el.setAttribute('style',\"padding:0;margin:0;list-style:none;transition:all 2.5s;animation:infiniteSlide 2.5s;\");\r\n    el.addEventListener('animationend',function(){\r\n      el.style.animation = '';\r\n      void el.offsetWidth;\r\n      let elNode = el.children[0].parentNode;\r\n      let firstChild = elNode.querySelector(childToQuery);\r\n      let clonedFirstChild = firstChild.cloneNode(true)\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    let injectedHtmlElCollection = this.htmlRef.current.children; // object\r\n    for(let n=0;n<injectedHtmlElCollection.length;n++){\r\n      let el = injectedHtmlElCollection[n];\r\n      if(el.classList.contains('link-container')){\r\n        el.setAttribute(\"style\",\"height:22px;overflow:hidden;line-height:22px;\");\r\n        if(el.children[0].tagName==='UL'){\r\n          let ul = el.children[0];\r\n          let keyframeEl = document.createElement('style');\r\n          keyframeEl.textContent = `\r\n            @keyframes infiniteSlide{\r\n                from {\r\n                  margin-top:0\r\n                }\r\n                to {\r\n                  margin-top: -22px\r\n                }\r\n            }\r\n          `;\r\n          ul.insertAdjacentElement('afterbegin',keyframeEl);\r\n          ul.setAttribute(\"style\",\"padding:0;margin:0;list-style:none;transition:all 2.5s;animation:infiniteSlide 2.5s;\");\r\n          ul.addEventListener('animationend',function(){\r\n            ul.style.animation = '';\r\n            void ul.offsetWidth;\r\n            let ulNode = ul.children[0].parentNode;\r\n            let firstLi = ulNode.querySelector('li');\r\n            let clonedFirstLi = firstLi.cloneNode(true);\r\n            ulNode.insertAdjacentElement('beforeend',clonedFirstLi);\r\n            ulNode.removeChild(firstLi);\r\n            ul.style.animation = 'infiniteSlide 2.5s';\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    console.log('component updated')\r\n  }\r\n\r\n  injectHtml(html){\r\n    let contExp = /link\\-container/;\r\n    let havCont = contExp.test(html);\r\n    if(havCont){\r\n\r\n    }\r\n    console.log('injected')\r\n    return (\r\n      <div dangerouslySetInnerHTML={{__html:html}} ref={this.htmlRef}></div>\r\n    )\r\n  }\r\n\r\n  render(){\r\n    const {bgColor, ftColor } = this.props.barConfig;\r\n    return (\r\n      <div style={{margin:'20px 0'}}>\r\n        <div style={{padding:'8px 0',position:'relative',backgroundColor:bgColor,color:ftColor}}>\r\n          { this.props.barConfig.goal?\r\n            this.props.barConfig.inpTxt + '$' + this.props.barConfig.goal\r\n            :\r\n            this.props.barConfig.inpTxt\r\n          }\r\n          {/* #question: how to turn user input into raw html */}\r\n          { this.props.barConfig.addedHtml?\r\n              this.injectHtml(this.props.barConfig.addedHtml) \r\n              :\r\n              null\r\n          }\r\n          <div style={{position:'absolute',top:'8px',right:'8px'}}>X</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PreviewBar;"]},"metadata":{},"sourceType":"module"}