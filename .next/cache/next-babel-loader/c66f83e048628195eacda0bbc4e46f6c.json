{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nclass PreviewBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.handleAddedHtml = this.handleAddedHtml.bind(this);\n  }\n\n  handleAddedHtml(userInp) {\n    // console.log(userInp);\n    // if 'link-container' class exists, have a fixed height, hide overflows and alternate the inner content;\n    let tagExp = /<\\/(\\w+)>/g;\n    let tagNProps = /<(\\w+[-'\"=\\s(\\w)\\:]*)>/g;\n    let re, tagWhole;\n    let tagArr = [],\n        tagWhArr = [];\n    let classes = userInp.match(/class=\"([-\\w\\s]+)\"/);\n    let containerLinkStyle = {};\n\n    while (re = tagExp.exec(userInp)) {\n      tagArr.push(re[1]);\n      if (!re) break;\n    }\n\n    while (tagWhole = tagNProps.exec(userInp)) {\n      tagWhArr.push(tagWhole[1]);\n      if (!tagWhole) break;\n    }\n\n    console.log(tagWhArr); // to parse tagWhArr, make it an array of objects containing tag, prop and children\n\n    tagWhArr.map((item, idx) => {\n      let result,\n          propArr = [],\n          props,\n          classExp = /([-\\w]+)=\"(.*)\"/g; // console.log(classExp.exec(item));\n      // [1] is attribute name, [2] is attribute value;\n\n      while (props = classExp.exec(item)) {\n        propArr.push(props[1]);\n      }\n    });\n\n    if (classes) {\n      classes = classes[1].split(' ');\n\n      if (classes.includes('container-link')) {\n        containerLinkStyle = {\n          height: '22px',\n          overflow: 'hidden'\n        };\n      }\n    }\n\n    if (userInp) {\n      let prop = {}; // if(tag==='a'){\n      //   prop['href']='https://wwww.baidu.com'\n      //   prop['style']={display:'block',color:'#fff'}\n      // }\n\n      for (let n = 0; n < tagArr.length; n++) {\n        switch (tagArr[n]) {\n          case 'a':\n            prop['href'] = '';\n            break;\n        }\n\n        return React.createElement(tagArr[n], prop, 'any text');\n      }\n    }\n  }\n\n  render() {\n    const {\n      bgColor,\n      ftColor\n    } = this.props.barConfig;\n    return __jsx(\"div\", {\n      style: {\n        margin: '20px 0'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        padding: '8px 0',\n        position: 'relative',\n        backgroundColor: bgColor,\n        color: ftColor\n      }\n    }, this.props.barConfig.goal ? this.props.barConfig.inpTxt + '$' + this.props.barConfig.goal : this.props.barConfig.inpTxt, this.props.barConfig.addedHtml ? this.handleAddedHtml(this.props.barConfig.addedHtml) : null, __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '8px',\n        right: '8px'\n      }\n    }, \"X\")));\n  }\n\n}\n\nexport default PreviewBar;","map":{"version":3,"sources":["C:\\Users\\Administrator.SC-201903211547\\projects\\0919\\sample-embedded-app\\snippets\\previewBar.js"],"names":["PreviewBar","React","Component","constructor","props","state","handleAddedHtml","bind","userInp","tagExp","tagNProps","re","tagWhole","tagArr","tagWhArr","classes","match","containerLinkStyle","exec","push","console","log","map","item","idx","result","propArr","classExp","split","includes","height","overflow","prop","n","length","createElement","render","bgColor","ftColor","barConfig","margin","padding","position","backgroundColor","color","goal","inpTxt","addedHtml","top","right"],"mappings":"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","sourcesContent":["\r\nclass PreviewBar extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {}\r\n    this.handleAddedHtml = this.handleAddedHtml.bind(this);\r\n  }\r\n\r\n  handleAddedHtml(userInp){\r\n    // console.log(userInp);\r\n    // if 'link-container' class exists, have a fixed height, hide overflows and alternate the inner content;\r\n    let tagExp = /<\\/(\\w+)>/g;\r\n    let tagNProps = /<(\\w+[-'\"=\\s(\\w)\\:]*)>/g;\r\n    let re, tagWhole ;\r\n    let tagArr = [],tagWhArr=[];\r\n    let classes = userInp.match(/class=\"([-\\w\\s]+)\"/);\r\n    let containerLinkStyle = {};\r\n    while(re= tagExp.exec(userInp)){\r\n      tagArr.push(re[1]);\r\n      if(!re) break;\r\n    }\r\n    while(tagWhole = tagNProps.exec(userInp)){\r\n      tagWhArr.push(tagWhole[1]);\r\n      if(!tagWhole) break;\r\n    }\r\n    console.log(tagWhArr);\r\n    // to parse tagWhArr, make it an array of objects containing tag, prop and children\r\n    tagWhArr.map((item,idx)=>{\r\n      let result,propArr=[], props,classExp=/([-\\w]+)=\"(.*)\"/g;\r\n      // console.log(classExp.exec(item));\r\n      // [1] is attribute name, [2] is attribute value;\r\n      while(props = classExp.exec(item)){\r\n        propArr.push(props[1]);\r\n        \r\n      }\r\n    })\r\n    if(classes){\r\n      classes = classes[1].split(' ');\r\n      if(classes.includes('container-link')){\r\n        containerLinkStyle = {height:'22px',overflow:'hidden'}\r\n      }\r\n    }\r\n    if(userInp) {\r\n      let prop={};\r\n      // if(tag==='a'){\r\n      //   prop['href']='https://wwww.baidu.com'\r\n      //   prop['style']={display:'block',color:'#fff'}\r\n      // }\r\n      for(let n=0;n<tagArr.length;n++){\r\n        switch(tagArr[n]){\r\n          case 'a':\r\n            prop['href']='';\r\n            break;\r\n        \r\n\r\n        }\r\n        return React.createElement(tagArr[n],prop,'any text')\r\n      }\r\n    } \r\n  }\r\n\r\n  render(){\r\n    const {bgColor, ftColor } = this.props.barConfig;\r\n    return (\r\n      <div style={{margin:'20px 0'}}>\r\n        <div style={{padding:'8px 0',position:'relative',backgroundColor:bgColor,color:ftColor}}>\r\n          { this.props.barConfig.goal?\r\n            this.props.barConfig.inpTxt + '$' + this.props.barConfig.goal\r\n            :\r\n            this.props.barConfig.inpTxt\r\n          }\r\n          {/* #question: how to turn user input into raw html */}\r\n          { this.props.barConfig.addedHtml?\r\n              this.handleAddedHtml(this.props.barConfig.addedHtml) \r\n              :\r\n              null\r\n          }\r\n          <div style={{position:'absolute',top:'8px',right:'8px'}}>X</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PreviewBar;"]},"metadata":{},"sourceType":"module"}